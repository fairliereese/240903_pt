import pandas as pd
import os
import sys

p = os.path.dirname(os.path.dirname(os.getcwd()))+'/scripts/'
sys.path.append(p)

from sm_utils import *
from utils import *

c_dir = '../common/'

meta_file = '../config.tsv'
configfile: '../config.yml'

df = parse_config(meta_file)

wildcard_constraints:
    sample='|'.join([re.escape(x) for x in df.tech_rep.tolist()]),
    lab_rep='|'.join([re.escape(x) for x in df.lab_rep.tolist()]),


include: f'{c_dir}download.smk'
include: f'{c_dir}samtools.smk'
include: f'{c_dir}winnowmap.smk'
include: f'{c_dir}bigwig.smk'
include: f'{c_dir}variant_calling.smk'
include: f'{c_dir}formatting.smk'
include: f'{c_dir}phasing.smk'
include: f'{c_dir}cerberus.smk'
include: f'{c_dir}lr-kallisto.smk'

df = df.loc[df.tech_rep=='GM19240_1']

rule all:
    input:
        expand(config['lr']['kallisto']['quant']['matrix_tsv'],
               sample=df.tech_rep.tolist()),
                       # expand(config['lr']['kallisto']['quant']['matrix_tpm_tsv'],
                       #        sample=df.tech_rep.tolist()),
                       # expand(config['lr']['kallisto']['quant']['matrix_tsv'],
                       #        sample=df.tech_rep.tolist()),
        # expand(config['lr']['kallisto']['matrix_tsv'],
        #        sample=df.tech_rep.tolist()),

def get_df_val(df, col1, col_dict):
    temp = df.copy(deep=True)

    for key, item in col_dict.items():
        temp = temp.loc[temp[key] == item]

    val = temp[col1].unique()
    assert len(val) == 1
    return val[0]

use rule kallisto_build_ind as kallisto_ind with:
    input:
        fa = config['ref']['fa'],
        gtf = config['lr']['gtf_filt_with_genes']
    output:
        ind = config['ref']['kallisto']['ind'],
        fa = config['ref']['kallisto']['t_fa'],
        t2g = config['ref']['kallisto']['t2g'],


use rule kallisto_pseudoalign as pseudoalign with:
    input:
        ind = config['ref']['kallisto']['ind'],
        fq = lambda wc: expand(config['lr']['fastq'],
                    lab_sample=get_df_val(df,
                            'lab_rep',
                            {'tech_rep': wc.sample})),
    params:
        kallisto_path = '/gpfs/home/bsc/bsc083001/miniconda3/envs/lr-kallisto/bin/kallisto',
        odir = config['lr']['kallisto']['odir']
    output:
        bus = config['lr']['kallisto']['bus'],
        flens = config['lr']['kallisto']['flens'],
        transcripts = config['lr']['kallisto']['transcripts'],
        matrix = config['lr']['kallisto']['matrix']

use rule bustools_sort as bt_sort with:
    input:
        bus = config['lr']['kallisto']['bus']
    output:
        bus = config['lr']['kallisto']['bus_sort']

rule bustools_count:
    input:
        bus = config['lr']['kallisto']['bus_sort'],
        transcripts = config['lr']['kallisto']['transcripts'],
        matrix = config['lr']['kallisto']['matrix'],
        t2g = config['ref']['kallisto']['t2g']
    params:
        bustools_path = '/gpfs/home/bsc/bsc083001/miniconda3/envs/bustools/bin/bustools',
        count_pref = config['lr']['kallisto']['count_pref']
    output:
        mtx = config['lr']['kallisto']['count_mtx'],
        ec = config['lr']['kallisto']['count_ec']

use rule lr_kallisto as run_lr_kallisto with:
    input:
        flens = config['lr']['kallisto']['flens'],
        mtx = config['lr']['kallisto']['count_mtx'],
        ind = config['ref']['kallisto']['ind'],
        ec = config['lr']['kallisto']['count_ec']
    params:
        kallisto_path = '/gpfs/home/bsc/bsc083001/miniconda3/envs/lr-kallisto/bin/kallisto',
        odir = config['lr']['kallisto']['quant']['odir']
    output:
        quant = config['lr']['kallisto']['quant']['matrix']

use rule fmt_mtx_transcripts as fmt_mtx_transcripts_counts with:
    input:
        mtx = config['lr']['kallisto']['quant']['matrix'],
        ts = config['lr']['kallisto']['transcripts']
    params:
        col = 'counts'
    output:
        tsv = config['lr']['kallisto']['quant']['matrix_tsv']
