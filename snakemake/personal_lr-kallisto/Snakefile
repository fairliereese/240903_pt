import pandas as pd
import os
import sys

p = os.path.dirname(os.path.dirname(os.getcwd()))+'/scripts/'
sys.path.append(p)

from sm_utils import *
from utils import *
# from vcf_utils import *

c_dir = '../common/'

meta_file = '../config.tsv'
meta_file_2 = 'config.tsv'
genomes_file = 'genomes_config.tsv'
configfile: '../config.yml'

include: f'{c_dir}download.smk'
include: f'{c_dir}samtools.smk'
include: f'{c_dir}winnowmap.smk'
include: f'{c_dir}bigwig.smk'
include: f'{c_dir}variant_calling.smk'
include: f'{c_dir}formatting.smk'
include: f'{c_dir}phasing.smk'
include: f'{c_dir}cerberus.smk'
include: f'{c_dir}bedtools.smk'
include: f'{c_dir}transdecoder.smk'
include: f'{c_dir}protein.smk'
include: f'{c_dir}minimap2.smk'
include: f'{c_dir}stats.smk'


meta_file = '../config.tsv'
meta_file_2 = 'config.tsv'
genomes_file = 'genomes_config.tsv'

df = parse_config(meta_file)
df2 = pd.read_csv(meta_file_2, sep='\t')
df2['tech_rep'] = df2.cell_line_id+'_1'
df2['same_sample'] = df2['pangenome_code']

# TODO test
# df2 = df2.loc[df2.cell_line_id == 'GM24385']

# get the genomes to download
g_df = pd.read_csv(genomes_file, sep='\t')

# maternal haplotypes
g_df['aws_mat_link'] = g_df['hap2_aws_fasta']
g_df = g_df.loc[g_df['aws_mat_link'].notnull()]
assert len(g_df.loc[g_df['aws_mat_link'].str.contains('maternal')].index) == len(g_df.index)

# paternal haplotypes
g_df['aws_pat_link'] = g_df['hap1_aws_fasta']
g_df = g_df.loc[g_df['aws_pat_link'].notnull()]
assert len(g_df.loc[g_df['aws_pat_link'].str.contains('paternal')].index) == len(g_df.index)

genome_cols = ['same_population_sample', 'european_sample',	'afr_sample', 'same_sample']
assemblies = genome_cols
# g_df = g_df.loc[(g_df['sample'].isin(df2[genome_cols[0]]))|
#                 (g_df['sample'].isin(df2[genome_cols[1]]))|
#                 (g_df['sample'].isin(df2[genome_cols[2]]))|
#                 (g_df['sample'].isin(df2[genome_cols[3]]))]

# a little more df2 formatting
df2 = df2[['tech_rep']+assemblies].melt(id_vars='tech_rep')
df2 = df2.reset_index()
df2 = df2.rename({'variable':'assembly_status',
                  'value': 'assembly_sample'},
                  axis=1)

# # limit just to the samples where we'll do this
# df = df.loc[df.tech_rep.isin(df2.tech_rep.tolist())]

# get a key for assembly status, assembly sample, and actual sample
df2['dataset_key'] = df2.assembly_status+'_'+\
                     df2.assembly_sample+'_'+\
                     df2.tech_rep

g_df = g_df[['sample', 'aws_mat_link', 'aws_pat_link']]
g_df = g_df = pd.melt(g_df, id_vars=['sample'],
                  value_vars=['aws_mat_link', 'aws_pat_link'],
                  var_name='haplotype', value_name='link')

# Map 'haplotype' column to 'maternal' or 'paternal' based on the column name
g_df['haplotype'] = g_df['haplotype'].map({
    'aws_mat_link': 'maternal',
    'aws_pat_link': 'paternal'
})

wildcard_constraints:
    assembly='|'.join([re.escape(x) for x in g_df['sample'].tolist()]),

rule all:
    input:
        expand(config['ref']['alt']['personal']['fa_gz'],
               assembly_sample=g_df['sample'].tolist(),
               assembly_haplotype=g_df['haplotype'].tolist())


def get_df_val(df, col1, col_dict, uniq_val=True):
    """
    uniq_val (b0ool) needs to return a uniq val rather
        than a list
    """
    temp = df.copy(deep=True)

    for key, item in col_dict.items():
        temp = temp.loc[temp[key] == item]

    if uniq_val:
        val = temp[col1].unique()
        assert len(val) == 1
        return val[0]
    else:
        return temp[col1].tolist()

use rule dl_aws as dl_personal_assembly_mat with:
    params:
        link = lambda wc: get_df_val(g_df, 'link',
                            {'sample': wc.assembly_sample,
                             'haplotype': wc.assembly_haplotype})
    output:
        out = config['ref']['alt']['personal']['fa_gz']
#
# use rule dl_aws as dl_personal_assembly_pat with:
#     params:
#         link = lambda wc: get_df_val(g_df, 'aws_pat_link',
#                             {'sample': wc.assembly_sample})
#     output:
#         out = config['ref']['alt']['personal']['pat_fa_gz']
