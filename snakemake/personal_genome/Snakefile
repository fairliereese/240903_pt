import pandas as pd
import os
import sys
from itertools import product
import pyranges as pr


p = os.path.dirname(os.path.dirname(os.getcwd()))+'/scripts/'
sys.path.append(p)

from sm_utils import *
from utils import *
# from vcf_utils import *

c_dir = '../common/'

meta_file = '../config.tsv'
configfile: '../config.yml'

include: f'{c_dir}download.smk'
include: f'{c_dir}samtools.smk'
include: f'{c_dir}winnowmap.smk'
include: f'{c_dir}bigwig.smk'
include: f'{c_dir}variant_calling.smk'
include: f'{c_dir}formatting.smk'
include: f'{c_dir}phasing.smk'
include: f'{c_dir}cerberus.smk'
include: f'{c_dir}bedtools.smk'
include: f'{c_dir}transdecoder.smk'
include: f'{c_dir}protein.smk'
include: f'{c_dir}minimap2.smk'
include: f'{c_dir}stats.smk'
include: f'{c_dir}lr-kallisto.smk'
include: f'{c_dir}kallisto.smk'

samples = ['HG002', 'HG00621', 'HG01928',
           'HG01952', 'NA18906', 'NA19240']
genomes = ['T2T', 'hg38']

combinations = list(product(samples, genomes))
df = pd.DataFrame(combinations, columns=['sample', 'genome'])
df2 = pd.DataFrame(data=samples, columns=['sample'])
df2['genome'] = df2['sample']
df = pd.concat([df, df2], axis=0)

wildcard_constraints:
    sample='|'.join([re.escape(x) for x in df['sample'].tolist()]),
    genome='|'.join([re.escape(x) for x in df['genome'].tolist()]),

rule all:
    input:
        expand(config['lr']['personal_genome']['t_info'],
               zip,
               sample=df['sample'].tolist(),
               genome=df['genome'].tolist()),
        expand(config['lr']['personal_genome']['t2g'],
               zip,
               sample=df['sample'].tolist(),
               genome=df['genome'].tolist())


# get transcript info (what we care about = # exons and total exon lenght)
def get_transcript_info_pg(gtf):

    df = pr.read_gtf(gtf, as_df=True, duplicate_attr=True)
    df = df.loc[df.Feature=='exon']

    # number of exons
    n_exons = df[['Feature', 'transcript_id']].groupby('transcript_id').count().reset_index().rename({'Feature':'n_exons'}, axis=1)

    # exon len
    df['exon_len'] = (df.Start-df.End).abs()+1
    df = df[['exon_len', 'transcript_id']].groupby('transcript_id').sum().reset_index()

    # merge in # n_exons
    df = df.merge(n_exons, how='left', on='transcript_id')

    return df


def get_t2g(gtf):
    df = pr.read_gtf(gtf).df
    df = df[['gene_id', 'transcript_id']].drop_duplicates()
    return df

rule get_t_info:
    input:
        gtf = config['lr']['personal_genome']['gtf']
    resources:
        nodes = 1,
        threads = 1
    output:
        tsv = config['lr']['personal_genome']['t_info']
    run:
        t_info = get_transcript_info_pg(input.gtf)
        t_info.to_csv(output.tsv, sep='\t', index=False)

rule rm_gene_gtf:
        input:
            gtf = config['lr']['personal_genome']['gtf']
        resources:
            nodes = 1,
            threads = 1
        output:
            gtf = config['lr']['personal_genome']['gtf_no_gene']
        run:
            import pyranges as pr
            df = pr.read_gtf(input.gtf).df
            df = df.loc[df.Feature!='gene']
            df = pr.PyRanges(df)
            df.to_gtf(output.gtf)

# build loci
rule buildloci:
    input:
        gtf = config['lr']['personal_genome']['gtf_no_gene']
    resources:
        threads = 1,
        nodes = 1
    conda:
        'base'
    params:
        buildLoci = config['software']['buildLoci'],
        prefix = 'novel_gene'
    output:
        gtf = config['lr']['personal_genome']['build_loci_gtf']
    shell:
        """
        module load bedtools
        bedtools intersect \
            -s \
            -wao \
            -a {input.gtf} \
            -b {input.gtf} | \
            {params.buildLoci} - \
                locPrefix {params.prefix} \
                > {output.gtf}
        """

rule get_t2g:
    input:
        gtf = config['lr']['personal_genome']['build_loci_gtf']
    resources:
        threads = 1,
        nodes = 1
    output:
        t2g = config['lr']['personal_genome']['t2g']
    run:
        df = get_t2g(input.gtf)
        df.to_csv(output.t2g, sep='\t', index=False)
