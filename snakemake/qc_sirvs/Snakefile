import pandas as pd
import os
import sys

p = os.path.dirname(os.path.dirname(os.getcwd()))+'/scripts/'
sys.path.append(p)

from sm_utils import *
from utils import *

c_dir = '../common/'
include: f'{c_dir}download.smk'
include: f'{c_dir}samtools.smk'
include: f'{c_dir}winnowmap.smk'
include: f'{c_dir}bigwig.smk'
include: f'{c_dir}variant_calling.smk'
include: f'{c_dir}formatting.smk'
include: f'{c_dir}phasing.smk'
include: f'{c_dir}cerberus.smk'
# include: f'{c_dir}lr-kallisto.smk'

meta_file = '../config.tsv'
configfile: '../config.yml'

df = parse_config(meta_file)

df = load_meta()
df = df.loc[~df['sample'].str.contains('_')]
df['lab_sample'] = df['lab_number_sample'].astype(str)+'_'+\
                      df['lab_sampleid'].astype(str)+'_'+\
                      df['cell_line_id'].astype(str)
df = df.loc[df.mixed_samples==False]
df = df[['cell_line_id', 'sample', 'hapmap_DNA_ID', 'lab_sample']].drop_duplicates()

# # TODO
# df = df.head(1)

wildcard_constraints:
    lab_sample='|'.join([re.escape(x) for x in df.lab_sample.tolist()]),
    annot_completeness='|'.join([re.escape(x) for x in ['I', 'C', 'O']]),


rule all:
    input:
        expand(config['lr']['qc_sirvs']['sqanti_reads']['class'],
               lab_sample=df.lab_sample.tolist(),
               annot_completeness=['I', 'C', 'O'])

use rule spliced_bam2gff as qc_sirv_bam_to_gff with:
    input:
        align = config['lr']['qc_sirvs']['bam']
    output:
        gff = temporary(config['lr']['qc_sirvs']['align_gff'])

# remove hyphens from chr names
rule refmt_fa:
    input:
        fa = config['ref']['sirv']['fa']
    resources:
        threads = 1,
        nodes = 1
    output:
        fa = temporary(config['ref']['sirv']['fmt_fa'])
    run:
        from pyfaidx import Fasta
        fasta = Fasta(input.fa, as_raw=True)
        with open(output.fa, 'w') as ofile:
            for record in fasta:
                new_name = record.name.replace('-', '')
                ofile.write(f">{new_name}\n{str(record)}\n")

# remove semicolons from transcript ids
# remove hyphens from chr names
rule refmt_gff:
    input:
        gff = config['lr']['qc_sirvs']['align_gff']
    resources:
        threads = 1,
        nodes = 1
    output:
        gtf = temporary(config['lr']['qc_sirvs']['fmt_gtf'])
    run:
        df = pr.read_gff(input.gff).df
        df['transcript_id'] = df.transcript_id.str.replace(';', '|')
        df['Chromosome'] = df.Chromosome.str.replace('-', '')
        df = pr.PyRanges(df)
        df.to_gtf(output.gtf)

rule make_design_csv:
    input:
        gff = config['lr']['qc_sirvs']['fmt_gtf']
    resources:
        threads = 1,
        nodes = 1
    output:
        csv = config['lr']['qc_sirvs']['design_csv']
    run:
        data = [f'{wildcards.lab_sample}_{wildcards.annot_completeness}',
                input.gff.rsplit('.', maxsplit=1)[0]]
        df = pd.DataFrame(data=[data], columns=['sampleID', 'file_acc'])
        df.to_csv(output.csv, sep=',')

rule sqanti_reads:
    input:
        ref_gtf = config['ref']['sirv']['gtf'],
        ref_fa = config['ref']['sirv']['fmt_fa'],
        gff = config['lr']['qc_sirvs']['fmt_gtf'],
        csv = config['lr']['qc_sirvs']['design_csv']
    resources:
        nodes = 1,
        threads = 15
    output:
        class_file = config['lr']['qc_sirvs']['sqanti_reads']['class']
    conda:
        'base'
    shell:
        """
        conda activate /gpfs/projects/bsc83/utils/conda_envs/SQANTI3-5.5
        python /gpfs/projects/bsc83/utils/sqanti3/sqanti3_reads.py \
            -t {resources.threads} \
            --design {input.csv} \
            --annotation {input.ref_gtf} \
            --genome {input.ref_fa}
        """
