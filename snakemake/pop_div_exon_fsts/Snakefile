
import pandas as pd
import os
import sys
import pyranges as pr

p = os.path.dirname(os.path.dirname(os.getcwd()))+'/scripts/'
sys.path.append(p)

from sm_utils import *
from utils import *
# from vcf_utils import *

c_dir = '../common/'

meta_file = '../config.tsv'
configfile: '../config.yml'

include: f'{c_dir}download.smk'
include: f'{c_dir}samtools.smk'
include: f'{c_dir}winnowmap.smk'
include: f'{c_dir}bigwig.smk'
include: f'{c_dir}variant_calling.smk'
include: f'{c_dir}formatting.smk'
include: f'{c_dir}phasing.smk'
include: f'{c_dir}cerberus.smk'
include: f'{c_dir}bedtools.smk'
include: f'{c_dir}transdecoder.smk'
include: f'{c_dir}protein.smk'
include: f'{c_dir}minimap2.smk'
include: f'{c_dir}stats.smk'
include: f'{c_dir}lr-kallisto.smk'
include: f'{c_dir}kallisto.smk'
include: f'{c_dir}suppa.smk'

# sample information
meta_file = '../config.tsv'

meta_df = load_meta()
meta_df['lab_sample'] = meta_df['lab_number_sample'].astype(str)+'_'+\
                      meta_df['lab_sampleid'].astype(str)+'_'+\
                      meta_df['cell_line_id'].astype(str)

# contrasts
c_df = pd.read_csv('fst_files.txt', header=None, names=['contrast'])
c_df[['pop1','pop2']] = c_df.contrast.str.split('_', expand=True)

# # TODO remove
# c_df = c_df.loc[c_df.pop1!= 'HAC']

rule all:
    input:
        config['lr']['exons_pop_spec_fsts'],
        config['lr']['exon_info'],
        config['lr']['exons_ss_in_pops_fsts_summary'],
        config['lr']['exons_ss_in_pops_fsts_summary_60nt']
        # expand(config['lr']['exons_in_pops_fsts'],
        #        zip,
        #        pop1=c_df.pop1.tolist(),
        #        pop2=c_df.pop2.tolist())
        # expand(config['1000g']['fst']['no_nan_fst'],
        #        zip,
        #        pop1=c_df.pop1.tolist(),
        #        pop2=c_df.pop2.tolist()),


# get details about each unique poder exom
rule get_poder_exon_info:
    input:
        poder_gtf = config['lr']['gtf_filt_with_genes'],
        ref_gtf = config['ref']['gtf']
    resources:
        nodes = 2,
        threads = 1
    output:
        tsv = config['lr']['exon_info']
    run:
        df = get_internal_exon_info(input.poder_gtf, input.ref_gtf)
        df.to_csv(output.tsv, sep='\t', index=False)

# remove nans
use rule rm_nan_fst as rm_nan_fsts with:
    input:
        fst = config['1000g']['fst']['raw_fst']
    output:
        fst = config['1000g']['fst']['no_nan_fst']

# get exon bed for each contrast where each reported exons is seen
# at least once in the populations
def get_det_exons_bed(exon_info_file,
                  mt_file,
                  pop1,
                  pop2):
    # get exon / transcript / novelty info from the table that
    # already ran
    df = pd.read_csv(exon_info_file, sep='\t')

    meta = load_meta()
    meta = meta.loc[meta.merged_run_mode==True]
    meta = meta.loc[meta.mixed_samples == False]
    pops = meta['population'].tolist()

    mt_df = pd.read_csv(mt_file, sep='\t')
    _, pops = get_population_colors()
    mt_df = mt_df[['isoform']+pops]
    mt_df.rename({'isoform':'transcript_id'},
                 inplace=True,
                 axis=1)

    # set index and just say t/f
    mt_df = mt_df.set_index('transcript_id')
    mt_df = mt_df>0
    mt_df.reset_index(inplace=True)

    # merge novelty info w/ detection info
    df = df.merge(mt_df,
                  how='left',
                  on='transcript_id')

    # dedupe eids, take max. of each population to
    # see if it's det or not
    df.drop('transcript_id', axis=1, inplace=True)
    df = df.groupby(['eid', 'novelty']).max().reset_index()

    # for each pair of populations, get the exons that are in them
    df = df[['eid', 'novelty', pop1, pop2]]
    df = df.loc[df[[pop1, pop2]].sum(axis=1)>=1]
    assert len(df.loc[(df[pop1]==False)&(df[pop2]==False)]) == 0

    df[['Chromosome', 'Strand', 'Start', 'End']] = df.eid.str.split('_', expand=True)

    # rename the populations to just pop1 and pop2; also add them
    # as columns
    df.rename({pop1:'pop1_det',
               pop2:'pop2_det'}, axis=1, inplace=True)
    df['pop1'] = pop1
    df['pop2'] = pop2
    return df

rule get_pop_det_exon_bed:
    input:
        mt = config['lr']['mt'],
        exon_info = config['lr']['exon_info']
    resources:
        nodes = 1,
        threads = 1
    output:
        tsv = config['lr']['exons_in_pops_bed']
    run:
        df = get_det_exons_bed(input.exon_info,
                              input.mt,
                              wildcards.pop1,
                              wildcards.pop2)
        df.to_csv(output.tsv, sep='\t', index=False)

rule get_pop_exon_fsts:
    input:
        tsv = config['lr']['exons_in_pops_bed'],
        fst = config['1000g']['fst']['no_nan_fst']
    resources:
        threads = 1,
        nodes = 2
    params:
        extension = 2
    output:
        tsv = config['lr']['exons_in_pops_fsts']
    run:
        fst_df = pd.read_csv(input.fst, sep='\t',
                    header=None, names=['Chromosome', 'End', 'fst'])
        fst_df = fst_df.loc[fst_df.End!='POS']
        fst_df['End'] = fst_df['End'].astype(int)
        fst_df['Start'] = fst_df['End']-1
        fst_df = pr.PyRanges(fst_df)

        exon_df = pd.read_csv(input.tsv, sep='\t')
        exon_df = pr.PyRanges(exon_df)

        # add coordinates to encompass splice sites
        # as well!
        exon_df = exon_df.extend(params.extension)
        df = exon_df.join(fst_df,
                          how='left',
                          strandedness=False)
        df = df.df
        df.to_csv(output.tsv, sep='\t', index=False)

use rule get_pop_exon_fsts as get_pop_exon_60nt_fsts with:
    input:
        tsv = config['lr']['exons_in_pops_bed'],
        fst = config['1000g']['fst']['no_nan_fst']
    params:
        extension = 60
    output:
        tsv = config['lr']['exons_in_pops_fsts_60nt']

rule get_summary:
    input:
        tsvs = expand(config['lr']['exons_in_pops_fsts'],
               zip,
               pop1=c_df.pop1.tolist(),
               pop2=c_df.pop2.tolist())
    resources:
        nodes = 2,
        threads = 1
    output:
        tsv = config['lr']['exons_ss_in_pops_fsts_summary']
    run:
        summ_df = pd.DataFrame()
        for f in list(input.tsvs):
            temp = pd.read_csv(f, sep='\t')
            summ_df = pd.concat([summ_df, temp], axis=0)
        summ_df.to_csv(output.tsv, sep='\t', index=False)

use rule get_summary as get_summary_60nt with:
    input:
        tsvs = expand(config['lr']['exons_in_pops_fsts_60nt'],
               zip,
               pop1=c_df.pop1.tolist(),
               pop2=c_df.pop2.tolist())
    resources:
        nodes = 2,
        threads = 1
    output:
        tsv = config['lr']['exons_ss_in_pops_fsts_summary_60nt']

###################################
####### Another try, in pop-spec exons
###################################

def get_pop_spec_exons(exon_info_file,
                       mt_file):
    # get exon / transcript / novelty info from the table that
    # already ran
    df = pd.read_csv(exon_info_file, sep='\t')

    meta = load_meta()
    meta = meta.loc[meta.merged_run_mode==True]
    meta = meta.loc[meta.mixed_samples == False]
    samples = meta['sample'].tolist()

    mt_df = pd.read_csv(mt_file, sep='\t')
    mt_df = mt_df[['isoform']+samples]
    mt_df.rename({'isoform':'transcript_id'},
                 inplace=True,
                 axis=1)

    # merge novelty info w/ detection info
    df = df.merge(mt_df,
                  how='left',
                  on='transcript_id')

    # dedupe eids, take max. of each population to
    # see if it's det or not
    df.drop('transcript_id', axis=1, inplace=True)
    df = df.groupby(['eid', 'novelty']).max().reset_index()

    # define population specificity
    for pop in meta.population.unique().tolist():
        df[pop] = df[meta.loc[meta.population==pop,
                              'sample'].tolist()].sum(axis=1)

    df = df.set_index(['eid', 'novelty'])
    df = df.drop(samples, axis=1)
    df['n_pop'] = (df>0).sum(axis=1)
    df['pop_spec'] = (df.n_pop==1)&(df[pops]>=2).any(axis=1)
    df['pop_spec_pop'] = df[pops].idxmax(axis=1)

    print(len(df.loc[df.pop_spec==True]))

    df = df.reset_index()
    df[['Chromosome', 'Strand', 'Start', 'End']] = df.eid.str.split('_', expand=True)
    df = df[['Chromosome', 'Strand', 'Start',
             'End', 'novelty', 'eid', 'pop_spec', 'pop_spec_pop']]

    return df

rule get_pop_spec_exon_bed:
    input:
        mt = config['lr']['mt'],
        exon_info = config['lr']['exon_info']
    resources:
        nodes = 1,
        threads = 1
    output:
        tsv = config['lr']['exons_pop_spec']
    run:
        df = get_pop_spec_exons(input.exon_info,
                              input.mt)
        df.to_csv(output.tsv, sep='\t', index=False)

use rule get_pop_exon_fsts as get_pop_spec_fsts with:
    input:
        tsv = config['lr']['exons_pop_spec'],
        fst = config['1000g']['fst']['no_nan_fst']
    params:
        extension = 2
    output:
        tsv = config['lr']['exons_pop_spec_fsts']
