import pandas as pd
import os
import sys

p = os.path.dirname(os.path.dirname(os.getcwd()))+'/scripts/'
sys.path.append(p)
#
# from sm_utils import *
# from utils import *
# from vcf_utils import *

c_dir = '../common/'

meta_file = 'config.tsv'
configfile: '../config.yml'

include: f'{c_dir}download.smk'
include: f'{c_dir}samtools.smk'
include: f'{c_dir}winnowmap.smk'
include: f'{c_dir}bigwig.smk'
include: f'{c_dir}variant_calling.smk'
include: f'{c_dir}formatting.smk'
include: f'{c_dir}phasing.smk'
include: f'{c_dir}cerberus.smk'

rule all:
    input:
        config['gtex']['cerberus']['ics'],
        config['gtex']['ab_fmt']

use rule wget as dl_gtex with:
    params:
        link = config['gtex']['gtf_link']
    output:
        out = temporary(config['gtex']['gtf_gz'])

use rule gunzip as gz_gtex with:
    input:
        gz = config['gtex']['gtf_gz']
    output:
        out = config['gtex']['gtf']

# # create gtex gtf only with known genes
# rule filter_gtex_gtf:
#     input:
#         gtf = config['gtex']['gtf']
#     resources:
#         mem_gb = 8,
#         threads = 1
#     output:
#         filt_gtf = config['gtex']['filt_gtf']
#     run:
#         filter_gtex_gtf(input.gtf, output.filt_gtf)

# use rule cerb_gtf_to_bed as cerb_get_gtf_ends with:
#     input:
#         gtf = config['gtex']['filt_gtf']
#     output:
#         ends = config['gtex']['cerberus']['ends']
#     params:
#         slack = lambda wc:config['params']['cerberus'][wc.end_mode]['slack'],
#         dist = lambda wc:config['params']['cerberus'][wc.end_mode]['dist']

use rule gtf_to_ic as gtex_gtf_to_ic with:
    input:
        gtf = config['gtex']['gtf']
    output:
        tsv = config['gtex']['cerberus']['ics']


use rule dl as dl_gtex_ab with:
    params:
        link = config['gtex']['ab_link']
    output:
        out = temporary(config['gtex']['ab_gz'])

use rule gunzip as gz_gtex_ab with:
    input:
        gz = config['gtex']['ab_gz']
    output:
        out = config['gtex']['ab']

def format_gtex_abundance(ifile, ofile):
    df = pd.read_csv(ifile, sep='\t')
    df['annot_transcript_id'] = df.transcript.str.rsplit('_', n=1, expand=True)[0]
    df.drop('transcript', axis=1, inplace=True)
    df['annot_transcript_name'] = df.annot_transcript_id
    df['transcript_ID'] = df.annot_transcript_id
    df.to_csv(ofile, sep='\t', index=False)

rule gtex_fmt_ab:
    input:
        ab = config['gtex']['ab']
    resources:
        threads = 1,
        mem_gb = 4
    output:
        ab = config['gtex']['ab_fmt']
    run:
        format_gtex_abundance(input.ab, output.ab)


# rule all_gtex:
#     input:
#
