import pandas as pd
import os
import sys

p = os.path.dirname(os.path.dirname(os.getcwd()))+'/scripts/'
sys.path.append(p)
#
# from sm_utils import *
# from utils import *
# from vcf_utils import *

c_dir = '../common/'

meta_file = 'config.tsv'
configfile: '../config.yml'

include: f'{c_dir}download.smk'
include: f'{c_dir}samtools.smk'
include: f'{c_dir}winnowmap.smk'
include: f'{c_dir}bigwig.smk'
include: f'{c_dir}variant_calling.smk'
include: f'{c_dir}formatting.smk'
include: f'{c_dir}phasing.smk'
include: f'{c_dir}cerberus.smk'

rule all:
    input:
        config['enc']['cerb']['ics'],
        config['chess']['cerb']['ics'],
        config['gtex']['cerb']['ics'],
        config['lr']['cerb']['ics'],
        config['ref']['cerb']['ics'],
        expand(config['lr']['sqanti']['gff'],
               annot=['gtex', 'enc', 'chess'])

########### gencode
use rule gtf_to_ic as gc_gtf_to_ic with:
    input:
        gtf = config['ref']['gtf']
    output:
        tsv = config['ref']['cerb']['ics']

############ chess
# use rule wget as dl_chess with:
#     params:
#         link = config['chess']['gtf_link']
#     output:
#         out = temporary(config['chess']['gtf_gz'])

use rule gunzip as gz_chess with:
    input:
        gz = config['chess']['gtf_gz']
    output:
        ofile = config['chess']['gtf']

use rule gtf_to_ic as chess_gtf_to_ic with:
    input:
        gtf = config['chess']['gtf']
    output:
        tsv = config['chess']['cerb']['ics']


############# enc
# use rule wget as dl_enc with:
#     params:
#         link = config['enc']['gtf_link']
#     output:
#         out = temporary(config['enc']['gtf'])


use rule gtf_to_ic as enc_gtf_to_ic with:
    input:
        gtf = config['enc']['gtf']
    output:
        tsv = config['enc']['cerb']['ics']

########### gtex
# use rule wget as dl_gtex with:
#     params:
#         link = config['gtex']['gtf_link']
#     output:
#         out = temporary(config['gtex']['gtf_gz'])

use rule gunzip as gz_gtex with:
    input:
        gz = config['gtex']['gtf_gz']
    output:
        ofile = config['gtex']['gtf']

use rule gtf_to_ic as gtex_gtf_to_ic with:
    input:
        gtf = config['gtex']['gtf']
    output:
        tsv = config['gtex']['cerb']['ics']

use rule gtf_to_ic as our_gtf_to_ic with:
    input:
        gtf = config['lr']['gtf_filt_with_genes']
    output:
        tsv = config['lr']['cerb']['ics']

#############
##### sqanti
############


rule sqanti:
    input:
        gtf = config['lr']['gtf_filt_with_genes'],
        fa = config['ref']['fa'],
        annot = lambda wc: config[wc.annot]['gtf']
    resources:
        nodes = 2,
        threads = 8
    conda:
        'base'
    params:
        sq_path = config['software']['sqanti_path'],
        opref = config['lr']['sqanti']['gff'].split('/')[-1].split('_corrected')[0],
        odir = '/'.join(config['lr']['sqanti']['gff'].split('/')[:-1])+'/'
    output:
        gff = config['lr']['sqanti']['gff']
    shell:
        """
        conda activate /gpfs/projects/bsc83/utils/conda_envs/SQANTI3-5.2.1
        mkdir -p {params.odir}
        python {params.sq_path}sqanti3_qc.py \
            {input.gtf} \
            {input.annot} \
            {input.fa} \
            -d {params.odir} \
            --report skip \
            --force_id_ignore \
            --aligner_choice minimap2 \
            --skipORF \
            -o {params.opref}
        """
