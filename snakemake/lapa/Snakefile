
import pandas as pd
import os
import sys
import pyranges as pr

p = os.path.dirname(os.path.dirname(os.getcwd()))+'/scripts/'
sys.path.append(p)

from sm_utils import *
from utils import *
# from vcf_utils import *

c_dir = '../common/'

meta_file = '../config.tsv'
configfile: '../config.yml'

include: f'{c_dir}download.smk'
include: f'{c_dir}samtools.smk'
include: f'{c_dir}winnowmap.smk'
include: f'{c_dir}bigwig.smk'
include: f'{c_dir}variant_calling.smk'
include: f'{c_dir}formatting.smk'
include: f'{c_dir}phasing.smk'
include: f'{c_dir}cerberus.smk'
include: f'{c_dir}bedtools.smk'
include: f'{c_dir}transdecoder.smk'
include: f'{c_dir}protein.smk'
include: f'{c_dir}minimap2.smk'
include: f'{c_dir}stats.smk'
include: f'{c_dir}lr-kallisto.smk'
include: f'{c_dir}kallisto.smk'
include: f'{c_dir}suppa.smk'

# sample information
meta_file = '../config.tsv'

df = load_meta()
df = df.loc[~df['sample'].str.contains('_')]
df['lab_sample'] = df['lab_number_sample'].astype(str)+'_'+\
                      df['lab_sampleid'].astype(str)+'_'+\
                      df['cell_line_id'].astype(str)
df = df[['cell_line_id', 'sample', 'hapmap_DNA_ID', 'lab_sample']].drop_duplicates()

def get_df_val(df, col1, col_dict):
    temp = df.copy(deep=True)

    for key, item in col_dict.items():
        temp = temp.loc[temp[key] == item]

    val = temp[col1].unique()
    assert len(val) == 1
    return val[0]

rule all:
    input:
        config['lr']['lapa']['config']

rule lapa_config:
    input:
        files = expand(config['lr']['q10_bam'],
               lab_sample=df['lab_sample'].tolist())
    params:
        samples = df['lab_sample'].tolist()
    resources:
        threads = 1,
        mem_gb = 1
    output:
        config = config['lr']['lapa']['config']
    run:
        samples_2 = []
        for f,s in zip(files, samples):
            assert s in f
            samples_2 += [get_df_val(df, 'sample', {'lab_sample':s})]

        df = pd.DataFrame()
        df['sample'] = samples_2
        df['dataset'] samples_2
        df['path'] = files
        df.to_csv(output.config, sep=',', index=False)

# rule lapa_tss:
#     input:
#         samples = ,
#         fa = ,
#         annot = ,
#         chrom_sizes =
#     resources:
#     output:
#         directory()
#     conda:
#         "lapa"
#     shell:
#         """
#         lapa_tss --alignment {input.config} \
#         	--fasta {input.fa} \
#         	--annotation {input.annot} \
#         	--chrom_sizes {input.chrom_sizes} \
#         	--output_dir {output}
#         """
