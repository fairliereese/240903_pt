
import pandas as pd
import os
import sys
import pyranges as pr

p = os.path.dirname(os.path.dirname(os.getcwd()))+'/scripts/'
sys.path.append(p)

from sm_utils import *
from utils import *
# from vcf_utils import *

c_dir = '../common/'

meta_file = '../config.tsv'
configfile: '../config.yml'

include: f'{c_dir}download.smk'
include: f'{c_dir}samtools.smk'
include: f'{c_dir}winnowmap.smk'
include: f'{c_dir}bigwig.smk'
include: f'{c_dir}variant_calling.smk'
include: f'{c_dir}formatting.smk'
include: f'{c_dir}phasing.smk'
include: f'{c_dir}cerberus.smk'
include: f'{c_dir}bedtools.smk'
include: f'{c_dir}transdecoder.smk'
include: f'{c_dir}protein.smk'
include: f'{c_dir}minimap2.smk'
include: f'{c_dir}stats.smk'
include: f'{c_dir}lr-kallisto.smk'
include: f'{c_dir}kallisto.smk'
include: f'{c_dir}suppa.smk'

# sample information
meta_file = '../config.tsv'

df = load_meta()
df = df.loc[~df['sample'].str.contains('_')]
df['lab_sample'] = df['lab_number_sample'].astype(str)+'_'+\
                      df['lab_sampleid'].astype(str)+'_'+\
                      df['cell_line_id'].astype(str)
df = df.loc[df.mixed_samples==False]
df = df[['cell_line_id', 'sample', 'hapmap_DNA_ID', 'lab_sample']].drop_duplicates()


def get_df_val(df, col1, col_dict):
    temp = df.copy(deep=True)

    for key, item in col_dict.items():
        temp = temp.loc[temp[key] == item]

    val = temp[col1].unique()
    assert len(val) == 1
    return val[0]

rule all:
    input:
        config['ref']['ccre']['pls_bed'],
        # config['lr']['lapa']['odir'],
        # config['lr']['lapa']['config']

rule lapa_config:
    input:
        files = expand(config['lr']['q10_bam'],
               lab_sample=df['lab_sample'].tolist())
    params:
        samples = df['lab_sample'].tolist(),
        df = df
    resources:
        nodes = 1,
        threads = 1
    output:
        config = config['lr']['lapa']['config']
    run:
        samples_2 = []
        for f,s in zip(input.files, params.samples):
            assert s in f
            samples_2 += [get_df_val(params.df, 'sample', {'lab_sample':s})]

        df = pd.DataFrame()
        df['sample'] = samples_2
        df['dataset'] = samples_2
        df['path'] = list(input.files)
        df.to_csv(output.config, sep=',', index=False)

use rule fa_get_chr_lens as hg38_get_chr_lens with:
    input:
        fa = config['ref']['fa']
    output:
        chr_lens = config['ref']['fa_chr_lens']

rule gtf_utr_fix:
    input:
        gtf = config['ref']['gtf']
    resources:
        threads = 1,
        nodes = 1
    output:
        gtf = config['ref']['gtf_utr_fix']
    conda:
        'lapa'
    shell:
        """
        gencode_utr_fix \
            --input_gtf {input.gtf} \
            --output_gtf {output.gtf}
        """

rule lapa_tss:
    input:
        config = config['lr']['lapa']['config'],
        fa = config['ref']['fa'],
        annot = config['ref']['gtf_utr_fix'],
        chrom_sizes = config['ref']['fa_chr_lens']
    resources:
        nodes = 2,
        threads = 16
    output:
        directory(config['lr']['lapa']['odir'])
    conda:
        "lapa"
    shell:
        """
        lapa_tss --alignment {input.config} \
        	--fasta {input.fa} \
        	--annotation {input.annot} \
        	--chrom_sizes {input.chrom_sizes} \
        	--output_dir {output}
        """


############## ccres
use rule wget as dl_ccre_pls with:
    params:
        link = config['ref']['ccre']['pls_link']
    output:
        out = config['ref']['ccre']['pls_bed']
