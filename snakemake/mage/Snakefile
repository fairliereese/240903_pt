import pandas as pd
import os
import sys

p = os.path.dirname(os.path.dirname(os.getcwd()))+'/scripts/'
sys.path.append(p)

from sm_utils import *
from utils import *
# from vcf_utils import *

c_dir = '../common/'

meta_file = '../config.tsv'
configfile: '../config.yml'

include: f'{c_dir}download.smk'
include: f'{c_dir}samtools.smk'
include: f'{c_dir}winnowmap.smk'
include: f'{c_dir}bigwig.smk'
include: f'{c_dir}variant_calling.smk'
include: f'{c_dir}formatting.smk'
include: f'{c_dir}phasing.smk'
include: f'{c_dir}cerberus.smk'
include: f'{c_dir}bedtools.smk'
include: f'{c_dir}transdecoder.smk'
include: f'{c_dir}protein.smk'
include: f'{c_dir}minimap2.smk'
include: f'{c_dir}stats.smk'
include: f'{c_dir}lr-kallisto.smk'
include: f'{c_dir}kallisto.smk'

meta_file = 'filereport_read_run_PRJNA851328_tsv.txt'

df = pd.read_csv(meta_file, sep='\t')
df[['cell_line_id', 'batch', 'rep']] = df.experiment_alias.str.split('_', expand=True)
len(df.index)
len(df.cell_line_id.unique())

df[['r1_fq_link', 'r2_fq_link']] = df.fastq_ftp.str.split(';', expand=True)
df['r1_verify'] = df.r1_fq_link.str.endswith('_1.fastq.gz')
df['r2_verify'] = df.r2_fq_link.str.endswith('_2.fastq.gz')
assert len(df.loc[df.r1_verify==False].index)==0
assert len(df.loc[df.r2_verify==False].index)==0

df['sample'] = df['experiment_alias']

wildcard_constraints:
    sample='|'.join([re.escape(x) for x in df['sample'].tolist()]),

def get_df_val(df, col1, col_dict, uniq_val=True):
    """
    uniq_val (b0ool) needs to return a uniq val rather
        than a list
    """
    temp = df.copy(deep=True)

    for key, item in col_dict.items():
        temp = temp.loc[temp[key] == item]

    if uniq_val:
        val = temp[col1].unique()
        assert len(val) == 1
        return val[0]
    else:
        return temp[col1].tolist()

rule all:
    input:
        expand(config['mage']['r1_fq'],
               sample=df['sample'].tolist()),
        expand(config['mage']['r2_fq'],
               sample=df['sample'].tolist()),
        expand(config['mage']['v47_kallisto']['bus_sort'],
               sample=df['sample'].tolist()[0]),

use rule wget as dl_r1_fq with:
    params:
        link = lambda wc: get_df_val(df, 'r1_fq_link',
                                     {'sample': wc.sample})
    output:
        out = config['mage']['r1_fq']

use rule wget as dl_r2_fq with:
    params:
        link = lambda wc: get_df_val(df, 'r2_fq_link',
                                     {'sample': wc.sample})
    output:
        out = config['mage']['r2_fq']


## v47 kallisto
use rule short_kallisto_build_ind as v47_sr_kallisto_ind with:
    input:
        fa = config['ref']['fa'],
        gtf = config['lr']['gtf_filt_with_genes']
    output:
        ind = config['ref']['v47_kallisto_short']['ind'],
        fa = config['ref']['v47_kallisto_short']['t_fa'],
        t2g = config['ref']['v47_kallisto_short']['t2g']

use rule short_kallisto_quant as v47_sr_kallisto_quant with:
    input:
        ind = config['ref']['v47_kallisto_short']['ind'],
        t2g = config['ref']['v47_kallisto_short']['t2g'],
        r1_fq = config['mage']['r1_fq'],
        r2_fq = config['mage']['r2_fq']
    params:
        kallisto_path = '/gpfs/home/bsc/bsc083001/miniconda3/envs/kallisto/bin/kallisto',
        odir = config['mage']['v47_kallisto']['odir']
    output:
        bus = config['mage']['v47_kallisto']['bus'],
        # flens = config['mage']['v47_kallisto']['flens'],
        transcripts = config['mage']['v47_kallisto']['transcripts'],
        matrix = config['mage']['v47_kallisto']['matrix']

use rule bustools_sort as v47_sr_kallisto_sort with:
    input:
        bus = config['mage']['v47_kallisto']['bus']
    output:
        bus = config['mage']['v47_kallisto']['bus_sort']
