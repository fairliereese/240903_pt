import pandas as pd
import os
import sys

p = os.path.dirname(os.path.dirname(os.getcwd()))+'/scripts/'
sys.path.append(p)

from sm_utils import *
from utils import *
# from vcf_utils import *

c_dir = '../common/'

meta_file = '../config.tsv'
configfile: '../config.yml'

include: f'{c_dir}download.smk'
include: f'{c_dir}samtools.smk'
include: f'{c_dir}winnowmap.smk'
include: f'{c_dir}bigwig.smk'
include: f'{c_dir}variant_calling.smk'
include: f'{c_dir}formatting.smk'
include: f'{c_dir}phasing.smk'
include: f'{c_dir}cerberus.smk'
include: f'{c_dir}bedtools.smk'
include: f'{c_dir}transdecoder.smk'
include: f'{c_dir}protein.smk'
include: f'{c_dir}minimap2.smk'
include: f'{c_dir}stats.smk'
include: f'{c_dir}lr-kallisto.smk'
include: f'{c_dir}kallisto.smk'

meta_file = 'filereport_read_run_PRJNA851328_tsv.txt'

df = pd.read_csv(meta_file, sep='\t')
df[['cell_line_id', 'batch', 'rep']] = df.experiment_alias.str.split('_', expand=True)
len(df.index)
len(df.cell_line_id.unique())

df[['r1_fq_link', 'r2_fq_link']] = df.fastq_ftp.str.split(';', expand=True)
df['r1_verify'] = df.r1_fq_link.str.endswith('_1.fastq.gz')
df['r2_verify'] = df.r2_fq_link.str.endswith('_2.fastq.gz')
assert len(df.loc[df.r1_verify==False].index)==0
assert len(df.loc[df.r2_verify==False].index)==0

df['sample'] = df['experiment_alias']
df['cell_line_id'] = df['sample'].str.split('_', expand=True)[0]
chroms = [str(i) for i in range(1,23)]+['X']

wildcard_constraints:
    sample='|'.join([re.escape(x) for x in df['sample'].tolist()]),
    chrom = '|'.join([re.escape(x) for x in chroms]),

def get_df_val(df, col1, col_dict, uniq_val=True):
    """
    uniq_val (b0ool) needs to return a uniq val rather
        than a list
    """
    temp = df.copy(deep=True)

    for key, item in col_dict.items():
        temp = temp.loc[temp[key] == item]

    if uniq_val:
        val = temp[col1].unique()
        assert len(val) == 1
        return val[0]
    else:
        return temp[col1].tolist()


rule all:
    input:
        expand(config['mage']['r1_fq'],
               sample=df['sample'].tolist()),
        expand(config['mage']['r2_fq'],
               sample=df['sample'].tolist()),
        config['mage']['v47_kallisto']['samp_filt']['merge_matrix_tpm_tsv'],
        config['mage']['poder_kallisto']['samp_filt']['merge_matrix_tpm_tsv'],
        config['mage']['enh_v47_kallisto']['samp_filt']['merge_matrix_tpm_tsv'],
        config['mage']['genotype_pc']['merge_vcf'],
        config['mage']['v47_kallisto']['sqtl']['merge_cis_vcf'],
        config['mage']['poder_kallisto']['sqtl']['merge_cis_vcf'],
        config['mage']['enh_v47_kallisto']['sqtl']['merge_cis_vcf'],

        # expand(config['mage']['genotype_pc']['pcs'],
        #        chrom=chroms)


use rule wget as dl_r1_fq with:
    params:
        link = lambda wc: get_df_val(df, 'r1_fq_link',
                                     {'sample': wc.sample})
    output:
        out = config['mage']['r1_fq']

use rule wget as dl_r2_fq with:
    params:
        link = lambda wc: get_df_val(df, 'r2_fq_link',
                                     {'sample': wc.sample})
    output:
        out = config['mage']['r2_fq']

rule merge_matrices:
    resources:
        nodes = 3,
        threads = 1
    run:
        merge_df = pd.DataFrame()
        samples = list(params.samples)
        i = 0
        for t, s in zip(list(input.tsvs), samples):
            temp = pd.read_csv(t, sep='\t')
            temp.rename({'counts': s}, axis=1, inplace=True)
            if i == 0:
                merge_df = temp.copy(deep=True)
            else:
                merge_df = merge_df.merge(temp, how='outer',
                            on='transcript_id')
            i+=1
        merge_df.to_csv(output.tsv, sep='\t', index=False)

rule compute_gene_level_tsv:
    resources:
        threads = 1,
        nodes = 3
    run:
        exp_df = pd.read_csv(input.tsv, sep='\t')
        t2g = pd.read_csv(input.t2g, sep='\t', header=None)
        t2g = t2g[[0,1]]
        t2g.columns = ['transcript_id', 'gid']

        # get gene assignments for each transcript using t2g file
        exp_df = exp_df.merge(t2g[['gid', 'transcript_id']],
                      how='left',
                      on='transcript_id')
        assert len(exp_df.loc[exp_df.gid.isnull()].index) == 0

        # drop tid, gb on gid and sum
        exp_df.drop('transcript_id', axis=1, inplace=True)
        exp_df = exp_df.groupby('gid').sum().reset_index()
        exp_df.to_csv(output.tsv, sep='\t', index=False)

## v47 kallisto
use rule short_kallisto_build_ind as v47_sr_kallisto_ind with:
    input:
        fa = config['ref']['fa'],
        gtf = config['ref']['gtf']
    params:
        kallisto_path = '/gpfs/home/bsc/bsc083001/miniconda3/envs/kallisto/bin/kallisto',
        odir = config['ref']['v47_kallisto_short']['ind'].split('.idx')[0]
    output:
        ind = config['ref']['v47_kallisto_short']['ind'],
        fa = config['ref']['v47_kallisto_short']['t_fa'],
        t2g = config['ref']['v47_kallisto_short']['t2g']

use rule short_kb_count as sr_kallisto_count with:
    input:
        ind = config['ref']['v47_kallisto_short']['ind'],
        t2g = config['ref']['v47_kallisto_short']['t2g'],
        r1_fq = config['mage']['r1_fq'],
        r2_fq = config['mage']['r2_fq']
    params:
        kallisto_path = '/gpfs/home/bsc/bsc083001/miniconda3/envs/kallisto/bin/kallisto',
        odir = config['mage']['v47_kallisto']['odir']
    output:
        mtx = config['mage']['v47_kallisto']['matrix'],
        mtx_tpm = config['mage']['v47_kallisto']['matrix_tpm'],
        transcripts = config['mage']['v47_kallisto']['transcripts']

use rule fmt_mtx_transcripts as get_counts_mtx with:
    input:
        mtx = config['mage']['v47_kallisto']['matrix'],
        ts = config['mage']['v47_kallisto']['transcripts']
    params:
        col = 'counts'
    output:
        tsv = config['mage']['v47_kallisto']['matrix_tsv']

use rule fmt_mtx_transcripts as get_tpm_mtx with:
    input:
        mtx = config['mage']['v47_kallisto']['matrix_tpm'],
        ts = config['mage']['v47_kallisto']['transcripts']
    params:
        col = 'counts'
    output:
        tsv = config['mage']['v47_kallisto']['matrix_tpm_tsv']

use rule merge_matrices as merge_matrices_tpm with:
    input:
        tsvs = expand(config['mage']['v47_kallisto']['matrix_tpm_tsv'],
                      sample=df['sample'].tolist())
    params:
        samples = df['sample'].tolist()
    output:
        tsv = config['mage']['v47_kallisto']['merge_matrix_tpm_tsv']

use rule merge_matrices as merge_matrices_counts with:
    input:
        tsvs = expand(config['mage']['v47_kallisto']['matrix_tsv'],
                      sample=df['sample'].tolist())
    params:
        samples = df['sample'].tolist()
    output:
        tsv = config['mage']['v47_kallisto']['merge_matrix_tsv']

use rule compute_gene_level_tsv as gene_level_tpm with:
    input:
        tsv = config['mage']['v47_kallisto']['merge_matrix_tpm_tsv'],
        t2g = config['ref']['v47_kallisto_short']['t2g']
    output:
        tsv = config['mage']['v47_kallisto']['gene_tpm_tsv']

use rule compute_gene_level_tsv as gene_level_counts with:
    input:
        tsv = config['mage']['v47_kallisto']['merge_matrix_tsv'],
        t2g = config['ref']['v47_kallisto_short']['t2g']
    output:
        tsv = config['mage']['v47_kallisto']['gene_tsv']

## v47 enh kallisto
use rule short_kallisto_build_ind as enh_v47_sr_kallisto_ind with:
    input:
        fa = config['ref']['fa'],
        gtf = config['lr']['gtf_gc_poder']
    params:
        kallisto_path = '/gpfs/home/bsc/bsc083001/miniconda3/envs/kallisto/bin/kallisto',
        odir = config['ref']['enh_v47_kallisto_short']['ind'].split('.idx')[0]
    output:
        ind = config['ref']['enh_v47_kallisto_short']['ind'],
        fa = config['ref']['enh_v47_kallisto_short']['t_fa'],
        t2g = config['ref']['enh_v47_kallisto_short']['t2g']

use rule short_kb_count as enh_v47_sr_kallisto_count with:
    input:
        ind = config['ref']['enh_v47_kallisto_short']['ind'],
        t2g = config['ref']['enh_v47_kallisto_short']['t2g'],
        r1_fq = config['mage']['r1_fq'],
        r2_fq = config['mage']['r2_fq']
    params:
        kallisto_path = '/gpfs/home/bsc/bsc083001/miniconda3/envs/kallisto/bin/kallisto',
        odir = config['mage']['enh_v47_kallisto']['odir']
    output:
        mtx = config['mage']['enh_v47_kallisto']['matrix'],
        mtx_tpm = config['mage']['enh_v47_kallisto']['matrix_tpm'],
        transcripts = config['mage']['enh_v47_kallisto']['transcripts']

use rule fmt_mtx_transcripts as enh_v47_get_counts_mtx with:
    input:
        mtx = config['mage']['enh_v47_kallisto']['matrix'],
        ts = config['mage']['enh_v47_kallisto']['transcripts']
    params:
        col = 'counts'
    output:
        tsv = config['mage']['enh_v47_kallisto']['matrix_tsv']

use rule fmt_mtx_transcripts as enh_v47_get_tpm_mtx with:
    input:
        mtx = config['mage']['enh_v47_kallisto']['matrix_tpm'],
        ts = config['mage']['enh_v47_kallisto']['transcripts']
    params:
        col = 'counts'
    output:
        tsv = config['mage']['enh_v47_kallisto']['matrix_tpm_tsv']

use rule merge_matrices as enh_v47_merge_matrices_tpm with:
    input:
        tsvs = expand(config['mage']['enh_v47_kallisto']['matrix_tpm_tsv'],
                      sample=df['sample'].tolist())
    params:
        samples = df['sample'].tolist()
    output:
        tsv = config['mage']['enh_v47_kallisto']['merge_matrix_tpm_tsv']

use rule merge_matrices as enh_v47_merge_matrices_counts with:
    input:
        tsvs = expand(config['mage']['enh_v47_kallisto']['matrix_tsv'],
                      sample=df['sample'].tolist())
    params:
        samples = df['sample'].tolist()
    output:
        tsv = config['mage']['enh_v47_kallisto']['merge_matrix_tsv']

use rule compute_gene_level_tsv as enh_v47_gene_level_tpm with:
    input:
        tsv = config['mage']['enh_v47_kallisto']['merge_matrix_tpm_tsv'],
        t2g = config['ref']['enh_v47_kallisto_short']['t2g']
    output:
        tsv = config['mage']['enh_v47_kallisto']['gene_tpm_tsv']

use rule compute_gene_level_tsv as enh_v47_gene_level_counts with:
    input:
        tsv = config['mage']['enh_v47_kallisto']['merge_matrix_tsv'],
        t2g = config['ref']['enh_v47_kallisto_short']['t2g']
    output:
        tsv = config['mage']['enh_v47_kallisto']['gene_tsv']

## poder kallisto
use rule short_kallisto_build_ind as poder_sr_kallisto_ind with:
    input:
        fa = config['ref']['fa'],
        gtf = config['lr']['gtf_filt_with_genes']
    params:
        kallisto_path = '/gpfs/home/bsc/bsc083001/miniconda3/envs/kallisto/bin/kallisto',
        odir = config['ref']['poder_kallisto_short']['ind'].split('.idx')[0]
    output:
        ind = config['ref']['poder_kallisto_short']['ind'],
        fa = config['ref']['poder_kallisto_short']['t_fa'],
        t2g = config['ref']['poder_kallisto_short']['t2g']

use rule short_kb_count as poder_sr_kallisto_count with:
    input:
        ind = config['ref']['poder_kallisto_short']['ind'],
        t2g = config['ref']['poder_kallisto_short']['t2g'],
        r1_fq = config['mage']['r1_fq'],
        r2_fq = config['mage']['r2_fq']
    params:
        kallisto_path = '/gpfs/home/bsc/bsc083001/miniconda3/envs/kallisto/bin/kallisto',
        odir = config['mage']['poder_kallisto']['odir']
    output:
        mtx = config['mage']['poder_kallisto']['matrix'],
        mtx_tpm = config['mage']['poder_kallisto']['matrix_tpm'],
        transcripts = config['mage']['poder_kallisto']['transcripts']

use rule fmt_mtx_transcripts as poder_get_counts_mtx with:
    input:
        mtx = config['mage']['poder_kallisto']['matrix'],
        ts = config['mage']['poder_kallisto']['transcripts']
    params:
        col = 'counts'
    output:
        tsv = config['mage']['poder_kallisto']['matrix_tsv']

use rule fmt_mtx_transcripts as poder_get_tpm_mtx with:
    input:
        mtx = config['mage']['poder_kallisto']['matrix_tpm'],
        ts = config['mage']['poder_kallisto']['transcripts']
    params:
        col = 'counts'
    output:
        tsv = config['mage']['poder_kallisto']['matrix_tpm_tsv']

use rule merge_matrices as poder_merge_matrices_tpm with:
    input:
        tsvs = expand(config['mage']['poder_kallisto']['matrix_tpm_tsv'],
                      sample=df['sample'].tolist())
    params:
        samples = df['sample'].tolist()
    output:
        tsv = config['mage']['poder_kallisto']['merge_matrix_tpm_tsv']

use rule merge_matrices as poder_merge_matrices_counts with:
    input:
        tsvs = expand(config['mage']['poder_kallisto']['matrix_tsv'],
                      sample=df['sample'].tolist())
    params:
        samples = df['sample'].tolist()
    output:
        tsv = config['mage']['poder_kallisto']['merge_matrix_tsv']

use rule compute_gene_level_tsv as poder_gene_level_tpm with:
    input:
        tsv = config['mage']['poder_kallisto']['merge_matrix_tpm_tsv'],
        t2g = config['ref']['poder_kallisto_short']['t2g']
    output:
        tsv = config['mage']['poder_kallisto']['gene_tpm_tsv']

use rule compute_gene_level_tsv as poder_gene_level_counts with:
    input:
        tsv = config['mage']['poder_kallisto']['merge_matrix_tsv'],
        t2g = config['ref']['poder_kallisto_short']['t2g']
    output:
        tsv = config['mage']['poder_kallisto']['gene_tsv']

########################
######## Genotype PCs ##
########################

# filter the 1000G VCF for
# 1. samples that are in MAGE
# 2. MAF >= 0.01
# vcftools ref: https://vcftools.github.io/man_latest.html
rule get_samples:
    resources:
        threads = 1,
        nodes = 1
    output:
        samples = config['mage']['samples']
    run:
        temp = df[['cell_line_id']]
        temp.to_csv(output.samples, header=None, index=False)

rule filt_sample_vcf:
    input:
        vcf = config['1000g']['vcf_chr'],
        samples = config['mage']['samples']
    resources:
        threads = 16,
        nodes = 2
    output:
        vcf = config['mage']['genotype_pc']['filt_sample_vcf']
    shell:
        """
        vcftools \
            --gzvcf {input.vcf} \
            --keep {input.samples} \
            --recode \
            --recode-INFO-all \
            --stdout | gzip -c > {output.vcf}
        """

rule filt_maf_vcf:
    input:
        vcf = config['mage']['genotype_pc']['filt_sample_vcf'],
        samples = config['mage']['samples']
    resources:
        threads = 16,
        nodes = 2
    params:
        min_maf = 0.01
    output:
        vcf = config['mage']['genotype_pc']['filt_maf_vcf']
    shell:
        """
        vcftools \
            --gzvcf {input.vcf} \
            --maf {params.min_maf} \
            --recode \
            --recode-INFO-all \
            --stdout | gzip -c > {output.vcf}
        """

use rule bcftools_concat as concat_genotype_pc_vcfs with:
    input:
        files = expand(config['mage']['genotype_pc']['filt_maf_vcf'],
                       chrom=chroms)
    params:
        cli_vcfs = fmt_for_cli(expand(config['mage']['genotype_pc']['filt_maf_vcf'],
                               chrom=chroms), sep=' ')
    output:
        vcf = config['mage']['genotype_pc']['merge_vcf']

# compute genotype PCs
rule genotype_pcs:
    input:
        vcf = config['mage']['genotype_pc']['merge_vcf']
    resources:
        threads = 112,
        nodes = 2
    params:
        opref = config['mage']['genotype_pc']['pcs'].rsplit('.', maxsplit=1)[0]
    output:
        pcs = config['mage']['genotype_pc']['pcs']
    shell:
        """
        module load plink
        plink2 \
            --vcf {input.vcf} \
            --allow-extra-chr \
            --set-missing-var-ids @:# \
            --make-bed \
            --pca \
            --threads {resources.threads} \
            --out {params.opref}
        """

###########################
###### Transcript / gene filtering
###########################

# sample filtering -- keep rep. / cell line
# w/ highest number of total counts
def get_filt_mage_samples(f, ofile):
    df = pd.read_csv(f, sep='\t')
    df = df.set_index('transcript_id')
    df = df.transpose()

    # counts / sample
    df = df.reset_index()
    df = df.rename({'index':'sample'}, axis=1)
    df['cell_line_id'] = df['sample'].str.split('_', expand=True)[0]
    df = df.set_index(['cell_line_id', 'sample'])
    df['total_counts'] = df.sum(axis=1)
    df = df[['total_counts']].reset_index()

    # dedupe on total counts
    df = df.sort_values(by='total_counts', ascending=False)
    print(len(df.index))
    df = df.drop_duplicates(subset=['cell_line_id'], keep='first')
    print(len(df.index))

    df = df[['sample']]
    df.to_csv(ofile, sep='\t', index=False)

def filt_mage_samples(samples, ab, ofile):
    # now filter
    s_df = pd.read_csv(samples, sep='\t')
    df = pd.read_csv(ab, sep='\t')
    samples = s_df['sample'].tolist()
    ind_cols = [c for c in df.columns if 'id' in c]
    df = df.set_index(ind_cols)
    df = df[samples]

    # convert to cell line id name format
    df.columns = [c.split('_')[0] for c in df.columns]

    df = df.reset_index()
    df.to_csv(ofile, sep='\t', index=False)

rule get_filt_mage_samples:
    input:
        tsv = config['mage']['enh_v47_kallisto']['merge_matrix_tsv'] # we'll use the same sample for everything for consistency
    resources:
        nodes = 2,
        threads = 1
    output:
        tsv = config['mage']['filt_samples']
    run:
        get_filt_mage_samples(input.tsv, output.tsv)

rule filt_mage_samples:
    resources:
        threads = 1,
        nodes = 2
    run:
        filt_mage_samples(input.samples, input.t_tsv, output.t_tsv)
        filt_mage_samples(input.samples, input.t_tpm_tsv, output.t_tpm_tsv)
        filt_mage_samples(input.samples, input.g_tsv, output.g_tsv)
        filt_mage_samples(input.samples, input.g_tpm_tsv, output.g_tpm_tsv)

use rule filt_mage_samples as enh_v47_filt_samples with:
    input:
        samples = config['mage']['filt_samples'],
        t_tsv = config['mage']['enh_v47_kallisto']['merge_matrix_tsv'],
        t_tpm_tsv = config['mage']['enh_v47_kallisto']['merge_matrix_tpm_tsv'],
        g_tsv = config['mage']['enh_v47_kallisto']['gene_tsv'],
        g_tpm_tsv = config['mage']['enh_v47_kallisto']['gene_tpm_tsv']
    output:
        t_tsv = config['mage']['enh_v47_kallisto']['samp_filt']['merge_matrix_tsv'],
        t_tpm_tsv = config['mage']['enh_v47_kallisto']['samp_filt']['merge_matrix_tpm_tsv'],
        g_tsv = config['mage']['enh_v47_kallisto']['samp_filt']['gene_tsv'],
        g_tpm_tsv = config['mage']['enh_v47_kallisto']['samp_filt']['gene_tpm_tsv']

use rule filt_mage_samples as poder_filt_samples with:
    input:
        samples = config['mage']['filt_samples'],
        t_tsv = config['mage']['poder_kallisto']['merge_matrix_tsv'],
        t_tpm_tsv = config['mage']['poder_kallisto']['merge_matrix_tpm_tsv'],
        g_tsv = config['mage']['poder_kallisto']['gene_tsv'],
        g_tpm_tsv = config['mage']['poder_kallisto']['gene_tpm_tsv']
    output:
        t_tsv = config['mage']['poder_kallisto']['samp_filt']['merge_matrix_tsv'],
        t_tpm_tsv = config['mage']['poder_kallisto']['samp_filt']['merge_matrix_tpm_tsv'],
        g_tsv = config['mage']['poder_kallisto']['samp_filt']['gene_tsv'],
        g_tpm_tsv = config['mage']['poder_kallisto']['samp_filt']['gene_tpm_tsv']

use rule filt_mage_samples as v47_filt_samples with:
    input:
        samples = config['mage']['filt_samples'],
        t_tsv = config['mage']['v47_kallisto']['merge_matrix_tsv'],
        t_tpm_tsv = config['mage']['v47_kallisto']['merge_matrix_tpm_tsv'],
        g_tsv = config['mage']['v47_kallisto']['gene_tsv'],
        g_tpm_tsv = config['mage']['v47_kallisto']['gene_tpm_tsv']
    output:
        t_tsv = config['mage']['v47_kallisto']['samp_filt']['merge_matrix_tsv'],
        t_tpm_tsv = config['mage']['v47_kallisto']['samp_filt']['merge_matrix_tpm_tsv'],
        g_tsv = config['mage']['v47_kallisto']['samp_filt']['gene_tsv'],
        g_tpm_tsv = config['mage']['v47_kallisto']['samp_filt']['gene_tpm_tsv']

# format the transcript tpm matrix in the format that sqtlseeker wants
# expression of each transcript in each sample TPM
# columns trId and geneId
rule fmt_sqtlseeker_t_tpm:
    input:
        t_tpm_tsv = config['mage']['v47_kallisto']['samp_filt']['merge_matrix_tpm_tsv'],
        t2g = config['ref']['v47_kallisto_short']['t2g']
    resources:
        threads = 1,
        nodes = 2
    output:
        t_tpm_tsv = config['mage']['v47_kallisto']['sqtl']['t_tpm_tsv'],
    run:
        df = pd.read_csv(input.t_tpm_tsv, sep='\t')
        df.rename({'transcript_id':'trId'}, axis=1, inplace=True)
        t2g_df = pd.read_csv(input.t2g, sep='\t', header=None)
        t2g_df = t2g_df[[0,1]]
        t2g_df.columns = ['trId', 'geneId']
        df = df.merge(t2g_df, how='left',
                      on='trId')
        assert len(df.loc[df.geneId.isnull()].index)==0
        df.to_csv(output.t_tpm_tsv, sep='\t', index=None)

use rule fmt_sqtlseeker_t_tpm as v47_fmt_sqtlseeker_t_tpm with:
    input:
        t_tpm_tsv = config['mage']['v47_kallisto']['samp_filt']['merge_matrix_tpm_tsv'],
        t2g = config['ref']['v47_kallisto_short']['t2g']
    output:
        t_tpm_tsv = config['mage']['v47_kallisto']['sqtl']['t_tpm_tsv'],
use rule fmt_sqtlseeker_t_tpm as enh_v47_fmt_sqtlseeker_t_tpm with:
    input:
        t_tpm_tsv = config['mage']['enh_v47_kallisto']['samp_filt']['merge_matrix_tpm_tsv'],
        t2g = config['ref']['enh_v47_kallisto_short']['t2g']
    output:
        t_tpm_tsv = config['mage']['enh_v47_kallisto']['sqtl']['t_tpm_tsv'],
use rule fmt_sqtlseeker_t_tpm as poder_fmt_sqtlseeker_t_tpm with:
    input:
        t_tpm_tsv = config['mage']['poder_kallisto']['samp_filt']['merge_matrix_tpm_tsv'],
        t2g = config['ref']['poder_kallisto_short']['t2g']
    output:
        t_tpm_tsv = config['mage']['poder_kallisto']['sqtl']['t_tpm_tsv'],

################
#### Preparing genotype file
################

### get +- 5kb regions for gene bodies
rule get_cis_regions:
    resources:
        threads = 16,
        nodes = 3
    params:
        extension = 5000
    run:
        gtf_df = pr.read_gtf(input.gtf).df
        gtf_df = gtf_df.loc[gtf_df.Feature=='gene']
        gtf_df = pr.PyRanges(gtf_df)
        gtf_df = gtf_df.extend(params.extension)
        gtf_df.to_bed(output.bed)
use rule get_cis_regions as v47_get_cis_regions with:
    input:
        gtf = config['ref']['gtf']
    output:
        bed = config['mage']['v47_kallisto']['sqtl']['cis_bed']
use rule get_cis_regions as enh_v47_get_cis_regions with:
    input:
        gtf = config['lr']['gtf_gc_poder']
    output:
        bed = config['mage']['enh_v47_kallisto']['sqtl']['cis_bed']
use rule get_cis_regions as poder_get_cis_regions with:
    input:
        gtf = config['lr']['gtf_filt_with_genes']
    output:
        bed = config['mage']['poder_kallisto']['sqtl']['cis_bed']

### filter vcfs on these cis regions
# using the maf / sample filtered variants... I think this makes sense
use rule bcftools_filter_on_regions as v47_get_cis_regions_vcf with:
    input:
        bed = config['mage']['v47_kallisto']['sqtl']['cis_bed'],
        vcf = config['mage']['genotype_pc']['filt_maf_vcf']
    output:
        vcf = config['mage']['v47_kallisto']['sqtl']['cis_vcf']
use rule bcftools_filter_on_regions as enh_v47_get_cis_region_vcf with:
    input:
        bed = config['mage']['enh_v47_kallisto']['sqtl']['cis_bed'],
        vcf = config['mage']['genotype_pc']['filt_maf_vcf']
    output:
        vcf = config['mage']['enh_v47_kallisto']['sqtl']['cis_vcf']
use rule bcftools_filter_on_regions as poder_get_cis_region_vcf with:
    input:
        bed = config['mage']['poder_kallisto']['sqtl']['cis_bed'],
        vcf = config['mage']['genotype_pc']['filt_maf_vcf']
    output:
        vcf = config['mage']['poder_kallisto']['sqtl']['cis_vcf']

use rule bcftools_concat as v47_concat_sqtl_vcfs with:
    input:
        files = expand(config['mage']['v47_kallisto']['sqtl']['cis_vcf'],
                       chrom=chroms)
    params:
        cli_vcfs = fmt_for_cli(expand(config['mage']['v47_kallisto']['sqtl']['cis_vcf'],
                               chrom=chroms), sep=' ')
    output:
        vcf = config['mage']['v47_kallisto']['sqtl']['merge_cis_vcf']
use rule bcftools_concat as enh_v47_concat_sqtl_vcfs with:
    input:
        files = expand(config['mage']['enh_v47_kallisto']['sqtl']['cis_vcf'],
                       chrom=chroms)
    params:
        cli_vcfs = fmt_for_cli(expand(config['mage']['enh_v47_kallisto']['sqtl']['cis_vcf'],
                               chrom=chroms), sep=' ')
    output:
        vcf = config['mage']['enh_v47_kallisto']['sqtl']['merge_cis_vcf']
use rule bcftools_concat as poder_concat_sqtl_vcfs with:
    input:
        files = expand(config['mage']['poder_kallisto']['sqtl']['cis_vcf'],
                       chrom=chroms)
    params:
        cli_vcfs = fmt_for_cli(expand(config['mage']['poder_kallisto']['sqtl']['cis_vcf'],
                               chrom=chroms), sep=' ')
    output:
        vcf = config['mage']['poder_kallisto']['sqtl']['merge_cis_vcf']
